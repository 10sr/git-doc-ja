# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Git Japanese translation team
# This file is distributed under the same license as the Git package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Git v1.8.4\n"
"POT-Creation-Date: 2013-12-04 01:53+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title -
#: ../../git.txt:5 ../../gittutorial.txt:5 ../../gittutorial-2.txt:5
#: ../../git-add.txt:5
#, no-wrap
msgid "NAME"
msgstr ""

#. type: Title -
#: ../../git.txt:10 ../../gittutorial.txt:9 ../../gittutorial-2.txt:9
#: ../../git-add.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr ""

#. type: Title -
#: ../../git.txt:19 ../../gittutorial.txt:14 ../../gittutorial-2.txt:14
#: ../../git-add.txt:17
#, no-wrap
msgid "DESCRIPTION"
msgstr ""

#. type: Title -
#: ../../git.txt:383 ../../git-add.txt:51
#, no-wrap
msgid "OPTIONS"
msgstr ""

#. type: Title -
#: ../../git.txt:966 ../../gittutorial.txt:664 ../../gittutorial-2.txt:424
#: ../../git-add.txt:396
#, no-wrap
msgid "SEE ALSO"
msgstr ""

#. type: Title -
#: ../../git.txt:974 ../../gittutorial.txt:675 ../../gittutorial-2.txt:434
#: ../../git-add.txt:405
#, no-wrap
msgid "GIT"
msgstr ""

#. type: Plain text
#: ../../git.txt:975 ../../git-add.txt:406
msgid "Part of the linkgit:git[1] suite"
msgstr ""

#. type: Title =
#: ../../git-add.txt:2
#, no-wrap
msgid "git-add(1)"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:7
msgid "git-add - Add file contents to the index"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:15
#, no-wrap
msgid ""
"'git add' [-n] [-v] [--force | -f] [--interactive | -i] [--patch | -p]\n"
"\t  [--edit | -e] [--[no-]all | --[no-]ignore-removal | [--update | -u]]\n"
"\t  [--intent-to-add | -N] [--refresh] [--ignore-errors] [--ignore-missing]\n"
"\t  [--] [<pathspec>...]\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:24
msgid ""
"This command updates the index using the current content found in the "
"working tree, to prepare the content staged for the next commit.  It "
"typically adds the current content of existing paths as a whole, but with "
"some options it can also be used to add content with only part of the "
"changes made to the working tree files applied, or remove paths that do not "
"exist in the working tree anymore."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:30
msgid ""
"The \"index\" holds a snapshot of the content of the working tree, and it is "
"this snapshot that is taken as the contents of the next commit.  Thus after "
"making any changes to the working directory, and before running the commit "
"command, you must use the `add` command to add any new or modified files to "
"the index."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:35
msgid ""
"This command can be performed multiple times before a commit.  It only adds "
"the content of the specified file(s) at the time the add command is run; if "
"you want subsequent changes included in the next commit, then you must run "
"`git add` again to add the new content to the index."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:38
msgid ""
"The `git status` command can be used to obtain a summary of which files have "
"changes that are staged for the next commit."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:45
msgid ""
"The `git add` command will not add ignored files by default.  If any ignored "
"files were explicitly specified on the command line, `git add` will fail "
"with a list of ignored files.  Ignored files reached by directory recursion "
"or filename globbing performed by Git (quote your globs before the shell) "
"will be silently ignored.  The 'git add' command can be used to add ignored "
"files with the `-f` (force) option."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:48
msgid ""
"Please see linkgit:git-commit[1] for alternative ways to add content to a "
"commit."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:58
#, no-wrap
msgid ""
"<pathspec>...::\n"
"\tFiles to add content from.  Fileglobs (e.g. `*.c`) can\n"
"\tbe given to add all matching files.  Also a\n"
"\tleading directory name (e.g. `dir` to add `dir/file1`\n"
"\tand `dir/file2`) can be given to add all files in the\n"
"\tdirectory, recursively.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:63
#, no-wrap
msgid ""
"-n::\n"
"--dry-run::\n"
"\tDon't actually add the file(s), just show if they exist and/or will\n"
"\tbe ignored.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:67
#, no-wrap
msgid ""
"-v::\n"
"--verbose::\n"
"        Be verbose.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:71
#, no-wrap
msgid ""
"-f::\n"
"--force::\n"
"\tAllow adding otherwise ignored files.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:78
#, no-wrap
msgid ""
"-i::\n"
"--interactive::\n"
"\tAdd modified contents in the working tree interactively to\n"
"\tthe index. Optional path arguments may be supplied to limit\n"
"\toperation to a subset of the working tree. See ``Interactive\n"
"\tmode'' for details.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:85
#, no-wrap
msgid ""
"-p::\n"
"--patch::\n"
"\tInteractively choose hunks of patch between the index and the\n"
"\twork tree and add them to the index. This gives the user a chance\n"
"\tto review the difference before adding modified contents to the\n"
"\tindex.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:89
#, no-wrap
msgid ""
"This effectively runs `add --interactive`, but bypasses the\n"
"initial command menu and directly jumps to the `patch` subcommand.\n"
"See ``Interactive mode'' for details.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:94
#, no-wrap
msgid ""
"-e, \\--edit::\n"
"\tOpen the diff vs. the index in an editor and let the user\n"
"\tedit it.  After the editor was closed, adjust the hunk headers\n"
"\tand apply the patch to the index.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:100
#, no-wrap
msgid ""
"The intent of this option is to pick and choose lines of the patch to\n"
"apply, or even to modify the contents of lines to be staged. This can be\n"
"quicker and more flexible than using the interactive hunk selector.\n"
"However, it is easy to confuse oneself and create a patch that does not\n"
"apply to the index. See EDITING PATCHES below.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:106
#, no-wrap
msgid ""
"-u::\n"
"--update::\n"
"\tUpdate the index just where it already has an entry matching\n"
"\t<pathspec>.  This removes as well as modifies index entries to\n"
"\tmatch the working tree, but adds no new files.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:111
#, no-wrap
msgid ""
"If no <pathspec> is given, the current version of Git defaults to\n"
"\".\"; in other words, update all tracked files in the current directory\n"
"and its subdirectories. This default will change in a future version\n"
"of Git, hence the form without <pathspec> should not be used.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:119
#, no-wrap
msgid ""
"-A::\n"
"--all::\n"
"--no-ignore-removal::\n"
"\tUpdate the index not only where the working tree has a file\n"
"\tmatching <pathspec> but also where the index already has an\n"
"\tentry.\tThis adds, modifies, and removes index entries to\n"
"\tmatch the working tree.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:124
#, no-wrap
msgid ""
"If no <pathspec> is given, the current version of Git defaults to\n"
"\".\"; in other words, update all files in the current directory\n"
"and its subdirectories. This default will change in a future version\n"
"of Git, hence the form without <pathspec> should not be used.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:131
#, no-wrap
msgid ""
"--no-all::\n"
"--ignore-removal::\n"
"\tUpdate the index by adding new files that are unknown to the\n"
"\tindex and files modified in the working tree, but ignore\n"
"\tfiles that have been removed from the working tree.  This\n"
"\toption is a no-op when no <pathspec> is used.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:137
#, no-wrap
msgid ""
"This option is primarily to help the current users of Git, whose\n"
"\"git add <pathspec>...\" ignores removed files.  In future versions\n"
"of Git, \"git add <pathspec>...\" will be a synonym to \"git add -A\n"
"<pathspec>...\" and \"git add --ignore-removal <pathspec>...\" will behave like\n"
"today's \"git add <pathspec>...\", ignoring removed files.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:145
#, no-wrap
msgid ""
"-N::\n"
"--intent-to-add::\n"
"\tRecord only the fact that the path will be added later. An entry\n"
"\tfor the path is placed in the index with no content. This is\n"
"\tuseful for, among other things, showing the unstaged content of\n"
"\tsuch files with `git diff` and committing them with `git commit\n"
"\t-a`.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:149
#, no-wrap
msgid ""
"--refresh::\n"
"\tDon't add the file(s), but only refresh their stat()\n"
"\tinformation in the index.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:156
#, no-wrap
msgid ""
"--ignore-errors::\n"
"\tIf some files could not be added because of errors indexing\n"
"\tthem, do not abort the operation, but continue adding the\n"
"\tothers. The command shall still exit with non-zero status.\n"
"\tThe configuration variable `add.ignoreErrors` can be set to\n"
"\ttrue to make this the default behaviour.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:162
#, no-wrap
msgid ""
"--ignore-missing::\n"
"\tThis option can only be used together with --dry-run. By using\n"
"\tthis option the user can check if any of the given files would\n"
"\tbe ignored, no matter if they are already present in the work\n"
"\ttree or not.\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:167
#, no-wrap
msgid ""
"\\--::\n"
"\tThis option can be used to separate command-line options from\n"
"\tthe list of files, (useful when filenames might be mistaken\n"
"\tfor command-line options).\n"
msgstr ""

#. type: Title -
#: ../../git-add.txt:170
#, no-wrap
msgid "Configuration"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:176
msgid ""
"The optional configuration variable `core.excludesfile` indicates a path to "
"a file containing patterns of file names to exclude from git-add, similar to "
"$GIT_DIR/info/exclude.  Patterns in the exclude file are used in addition to "
"those in info/exclude.  See linkgit:gitignore[5]."
msgstr ""

#. type: Title -
#: ../../git-add.txt:179
#, no-wrap
msgid "EXAMPLES"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:183
msgid ""
"Adds content from all `*.txt` files under `Documentation` directory and its "
"subdirectories:"
msgstr ""

#. type: delimited block -
#: ../../git-add.txt:186
#, no-wrap
msgid "$ git add Documentation/\\*.txt\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:191
msgid ""
"Note that the asterisk `*` is quoted from the shell in this example; this "
"lets the command include the files from subdirectories of `Documentation/` "
"directory."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:193
msgid "Considers adding content from all git-*.sh scripts:"
msgstr ""

#. type: delimited block -
#: ../../git-add.txt:196
#, no-wrap
msgid "$ git add git-*.sh\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:201
msgid ""
"Because this example lets the shell expand the asterisk (i.e. you are "
"listing the files explicitly), it does not consider `subdir/git-foo.sh`."
msgstr ""

#. type: Title -
#: ../../git-add.txt:203
#, no-wrap
msgid "Interactive mode"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:207
msgid ""
"When the command enters the interactive mode, it shows the output of the "
"'status' subcommand, and then goes into its interactive command loop."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:212
msgid ""
"The command loop shows the list of subcommands available, and gives a prompt "
"\"What now> \".  In general, when the prompt ends with a single '>', you can "
"pick only one of the choices given and type return, like this:"
msgstr ""

#. type: delimited block -
#: ../../git-add.txt:218
#, no-wrap
msgid ""
"    *** Commands ***\n"
"      1: status       2: update       3: revert       4: add untracked\n"
"      5: patch        6: diff         7: quit         8: help\n"
"    What now> 1\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:222
msgid ""
"You also could say `s` or `sta` or `status` above as long as the choice is "
"unique."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:224
msgid "The main command loop has 6 subcommands (plus help and quit)."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:225
#, no-wrap
msgid "status"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:232
msgid ""
"This shows the change between HEAD and index (i.e. what will be committed if "
"you say `git commit`), and between index and working tree files (i.e. what "
"you could stage further before `git commit` using `git add`) for each path.  "
"A sample output looks like this:"
msgstr ""

#. type: delimited block -
#: ../../git-add.txt:237
#, no-wrap
msgid ""
"              staged     unstaged path\n"
"     1:       binary      nothing foo.png\n"
"     2:     +403/-35        +1/-1 git-add--interactive.perl\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:248
msgid ""
"It shows that foo.png has differences from HEAD (but that is binary so line "
"count cannot be shown) and there is no difference between indexed copy and "
"the working tree version (if the working tree version were also different, "
"'binary' would have been shown in place of 'nothing').  The other file, git-"
"add{litdd}interactive.perl, has 403 lines added and 35 lines deleted if you "
"commit what is in the index, but working tree file has further modifications "
"(one addition and one deletion)."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:249
#, no-wrap
msgid "update"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:258
msgid ""
"This shows the status information and issues an \"Update>>\" prompt.  When "
"the prompt ends with double '>>', you can make more than one selection, "
"concatenated with whitespace or comma.  Also you can say ranges.  E.g. \"2-5 "
"7,9\" to choose 2,3,4,5,7,9 from the list.  If the second number in a range "
"is omitted, all remaining patches are taken.  E.g. \"7-\" to choose 7,8,9 "
"from the list.  You can say '*' to choose everything."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:261
msgid "What you chose are then highlighted with '*', like this:"
msgstr ""

#. type: delimited block -
#: ../../git-add.txt:266
#, no-wrap
msgid ""
"           staged     unstaged path\n"
"  1:       binary      nothing foo.png\n"
"* 2:     +403/-35        +1/-1 git-add--interactive.perl\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:270
msgid "To remove selection, prefix the input with `-` like this:"
msgstr ""

#. type: delimited block -
#: ../../git-add.txt:273
#, no-wrap
msgid "Update>> -2\n"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:277
msgid ""
"After making the selection, answer with an empty line to stage the contents "
"of working tree files for selected paths in the index."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:278
#, no-wrap
msgid "revert"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:283
msgid ""
"This has a very similar UI to 'update', and the staged information for "
"selected paths are reverted to that of the HEAD version.  Reverting new "
"paths makes them untracked."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:284
#, no-wrap
msgid "add untracked"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:288
msgid ""
"This has a very similar UI to 'update' and 'revert', and lets you add "
"untracked paths to the index."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:289
#, no-wrap
msgid "patch"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:296
msgid ""
"This lets you choose one path out of a 'status' like selection.  After "
"choosing the path, it presents the diff between the index and the working "
"tree file and asks you if you want to stage the change of each hunk.  You "
"can select one of the following options and type return:"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:311
msgid ""
"y - stage this hunk n - do not stage this hunk q - quit; do not stage this "
"hunk nor any of the remaining ones a - stage this hunk and all later hunks "
"in the file d - do not stage this hunk nor any of the later hunks in the "
"file g - select a hunk to go to / - search for a hunk matching the given "
"regex j - leave this hunk undecided, see next undecided hunk J - leave this "
"hunk undecided, see next hunk k - leave this hunk undecided, see previous "
"undecided hunk K - leave this hunk undecided, see previous hunk s - split "
"the current hunk into smaller hunks e - manually edit the current hunk ? - "
"print help"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:314
msgid ""
"After deciding the fate for all hunks, if there is any hunk that was chosen, "
"the index is updated with the selected hunks."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:317
msgid ""
"You can omit having to type return here, by setting the configuration "
"variable `interactive.singlekey` to `true`."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:318
#, no-wrap
msgid "diff"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:322
msgid ""
"This lets you review what will be committed (i.e. between HEAD and index)."
msgstr ""

#. type: Title -
#: ../../git-add.txt:325
#, no-wrap
msgid "EDITING PATCHES"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:335
msgid ""
"Invoking `git add -e` or selecting `e` from the interactive hunk selector "
"will open a patch in your editor; after the editor exits, the result is "
"applied to the index. You are free to make arbitrary changes to the patch, "
"but note that some changes may have confusing results, or even result in a "
"patch that cannot be applied.  If you want to abort the operation entirely "
"(i.e., stage nothing new in the index), simply delete all lines of the "
"patch. The list below describes some common things you may see in a patch, "
"and which editing operations make sense on them."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:337
#, no-wrap
msgid "added content"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:341
msgid ""
"Added content is represented by lines beginning with \"{plus}\". You can "
"prevent staging any addition lines by deleting them."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:342
#, no-wrap
msgid "removed content"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:346
msgid ""
"Removed content is represented by lines beginning with \"-\". You can "
"prevent staging their removal by converting the \"-\" to a \" \" (space)."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:347
#, no-wrap
msgid "modified content"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:354
msgid ""
"Modified content is represented by \"-\" lines (removing the old content)  "
"followed by \"{plus}\" lines (adding the replacement content). You can "
"prevent staging the modification by converting \"-\" lines to \" \", and "
"removing \"{plus}\" lines. Beware that modifying only half of the pair is "
"likely to introduce confusing changes to the index."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:362
msgid ""
"There are also more complex operations that can be performed. But beware "
"that because the patch is applied only to the index and not the working "
"tree, the working tree will appear to \"undo\" the change in the index.  For "
"example, introducing a new line into the index that is in neither the HEAD "
"nor the working tree will stage the new line for commit, but the line will "
"appear to be reverted in the working tree."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:364
msgid "Avoid using these constructs, or do so with extreme caution."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:366
#, no-wrap
msgid "removing untouched content"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:372
msgid ""
"Content which does not differ between the index and working tree may be "
"shown on context lines, beginning with a \" \" (space).  You can stage "
"context lines for removal by converting the space to a \"-\". The resulting "
"working tree file will appear to re-add the content."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:373
#, no-wrap
msgid "modifying existing content"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:380
msgid ""
"One can also modify context lines by staging them for removal (by converting "
"\" \" to \"-\") and adding a \"{plus}\" line with the new content.  "
"Similarly, one can modify \"{plus}\" lines for existing additions or "
"modifications. In all cases, the new modification will appear reverted in "
"the working tree."
msgstr ""

#. type: Labeled list
#: ../../git-add.txt:381
#, no-wrap
msgid "new content"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:386
msgid ""
"You may also add new content that does not exist in the patch; simply add "
"new lines, each starting with \"{plus}\". The addition will appear reverted "
"in the working tree."
msgstr ""

#. type: Plain text
#: ../../git-add.txt:390
msgid ""
"There are also several operations which should be avoided entirely, as they "
"will make the patch impossible to apply:"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:392
msgid "adding context (\" \") or removal (\"-\") lines"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:393
msgid "deleting context or removal lines"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:394
msgid "modifying the contents of context or removal lines"
msgstr ""

#. type: Plain text
#: ../../git-add.txt:403
msgid ""
"linkgit:git-status[1] linkgit:git-rm[1] linkgit:git-reset[1] linkgit:git-mv"
"[1] linkgit:git-commit[1] linkgit:git-update-index[1]"
msgstr ""
