# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-12-04 01:19+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title -
#: ../../git.txt:5 ../../gittutorial.txt:5 ../../gittutorial-2.txt:5
#, no-wrap
msgid "NAME"
msgstr "名前"

#. type: Title -
#: ../../git.txt:10 ../../gittutorial.txt:9 ../../gittutorial-2.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "書式"

#. type: Title -
#: ../../git.txt:19 ../../gittutorial.txt:14 ../../gittutorial-2.txt:14
#, no-wrap
msgid "DESCRIPTION"
msgstr "説明"

#. type: Title -
#: ../../git.txt:966 ../../gittutorial.txt:664 ../../gittutorial-2.txt:424
#, no-wrap
msgid "SEE ALSO"
msgstr "関連項目"

#. type: Title -
#: ../../git.txt:974 ../../gittutorial.txt:675 ../../gittutorial-2.txt:434
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../../gittutorial.txt:12 ../../gittutorial-2.txt:12
#, no-wrap
msgid "git *\n"
msgstr "git *\n"

#. type: Plain text
#: ../../gittutorial.txt:676 ../../gittutorial-2.txt:435
#, fuzzy
msgid "Part of the linkgit:git[1] suite."
msgstr "linkgit:git[1] スイートの一部"

#. type: Title =
#: ../../gittutorial-2.txt:2
#, fuzzy, no-wrap
msgid "gittutorial-2(7)"
msgstr "gittutorial-2(7)"

#. type: Plain text
#: ../../gittutorial-2.txt:7
#, fuzzy
msgid "gittutorial-2 - A tutorial introduction to Git: part two"
msgstr "gittutorial-2 - git チュートリアル：パート２"

#. type: Plain text
#: ../../gittutorial-2.txt:17
#, fuzzy
msgid ""
"You should work through linkgit:gittutorial[7] before reading this tutorial."
msgstr ""
"注意：このチュートリアルを読む前に linkgit:gittutorial[7] を学習してくださ"
"い。"

#. type: Plain text
#: ../../gittutorial-2.txt:22
#, fuzzy
msgid ""
"The goal of this tutorial is to introduce two fundamental pieces of Git's "
"architecture--the object database and the index file--and to provide the "
"reader with everything necessary to understand the rest of the Git "
"documentation."
msgstr ""
"このチュートリアルの目的は、git のアーキテクチャである２つの 基本部品(オブ"
"ジェクトデータベース、索引ファイル)を紹介することと、 git のドキュメントの残"
"りの部分を理解する為に必要な全てを読者に 伝えることです。"

#. type: Title -
#: ../../gittutorial-2.txt:24
#, fuzzy, no-wrap
msgid "The Git object database"
msgstr "git のオブジェクトデータベース"

#. type: Plain text
#: ../../gittutorial-2.txt:27
#, fuzzy
msgid "Let's start a new project and create a small amount of history:"
msgstr "新規プロジェクトを開始し、少し履歴を作成しましょう。"

#. type: delimited block -
#: ../../gittutorial-2.txt:43
#, fuzzy, no-wrap
msgid ""
"$ mkdir test-project\n"
"$ cd test-project\n"
"$ git init\n"
"Initialized empty Git repository in .git/\n"
"$ echo 'hello world' > file.txt\n"
"$ git add .\n"
"$ git commit -a -m \"initial commit\"\n"
"[master (root-commit) 54196cc] initial commit\n"
" 1 file changed, 1 insertion(+)\n"
" create mode 100644 file.txt\n"
"$ echo 'hello world!' >file.txt\n"
"$ git commit -a -m \"add emphasis\"\n"
"[master c4d59f3] add emphasis\n"
" 1 file changed, 1 insertion(+), 1 deletion(-)\n"
msgstr ""
"$ mkdir test-project\n"
"$ cd test-project\n"
"$ git init\n"
"Initialized empty Git repository in .git/\n"
"$ echo 'hello world' > file.txt\n"
"$ git add .\n"
"$ git commit -a -m \"initial commit\"\n"
"[master (root-commit) 54196cc] initial commit\n"
" 1 files changed, 1 insertions(+), 0 deletions(-)\n"
" create mode 100644 file.txt\n"
"$ echo 'hello world!' >file.txt\n"
"$ git commit -a -m \"add emphasis\"\n"
"[master c4d59f3] add emphasis\n"
" 1 files changed, 1 insertions(+), 1 deletions(-)\n"

#. type: Plain text
#: ../../gittutorial-2.txt:46
#, fuzzy
msgid "What are the 7 digits of hex that Git responded to the commit with?"
msgstr "コミット時のメッセージに含まれる 7桁 の16進数は何でしょうか？"

#. type: Plain text
#: ../../gittutorial-2.txt:57
#, fuzzy
msgid ""
"We saw in part one of the tutorial that commits have names like this.  It "
"turns out that every object in the Git history is stored under a 40-digit "
"hex name.  That name is the SHA-1 hash of the object's contents; among other "
"things, this ensures that Git will never store the same data twice (since "
"identical data is given an identical SHA-1 name), and that the contents of a "
"Git object will never change (since that would change the object's name as "
"well). The 7 char hex strings here are simply the abbreviation of such 40 "
"character long strings.  Abbreviations can be used everywhere where the 40 "
"character strings can be used, so long as they are unambiguous."
msgstr ""
"我々はチュートリアルのパート１で、コミットがこのような名前を持つことを見てき"
"ました。 これは、git の履歴内にある全てのオブジェクトが 40桁の16進数の名前で "
"格納されていることを示しています。 この名前はオブジェクトのコンテンツの SHA1 "
"ハッシュ値です； それはつまり、git が同じデータを２回記録することが決してない"
"ことを 保障しています(同一のデータは同じ SHA1 名となるからです)。 そして、"
"git オブジェクトのコンテンツは、決して変わりません (オブジェクトが変更された"
"場合、その名前も同じように変更される為です)。 ここにある7桁の16進数の名前は40"
"桁の16進数の名前をあいまいにならない範囲で 省略した物です。"

#. type: Plain text
#: ../../gittutorial-2.txt:62
#, fuzzy
msgid ""
"It is expected that the content of the commit object you created while "
"following the example above generates a different SHA-1 hash than the one "
"shown above because the commit object records the time when it was created "
"and the name of the person performing the commit."
msgstr ""
"上記例に従ってあなたが作成したコミットオブジェクトのコンテンツは、 上記に表示"
"されたものと異なる SHA1 ハッシュ値を生成するでしょう。 なぜなら、コミットオブ"
"ジェクトは、作成日時とコミットした人の名前を 記録するからです。"

#. type: Plain text
#: ../../gittutorial-2.txt:67
#, fuzzy
msgid ""
"We can ask Git about this particular object with the `cat-file` command. "
"Don't copy the 40 hex digits from this example but use those from your own "
"version. Note that you can shorten it to only a few characters to save "
"yourself typing all 40 hex digits:"
msgstr ""
"git の `cat-file` コマンドを用いるとこの特定のオブジェクトについて調べること"
"ができます。 この例の 40桁の 16進数をコピーせず、あなた自身のバージョンの名前"
"を 使用してください。40桁全てではなく、最初の数桁をタイプするだけで 良い点に"
"注意してください。"

#. type: delimited block -
#: ../../gittutorial-2.txt:75
#, fuzzy, no-wrap
msgid ""
"$ git cat-file -t 54196cc2\n"
"commit\n"
"$ git cat-file commit 54196cc2\n"
"tree 92b8b694ffb1675e5975148e1121810081dbdffe\n"
"author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"
"committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"
msgstr ""
"$ git cat-file -t 54196cc2\n"
"commit\n"
"$ git cat-file commit 54196cc2\n"
"tree 92b8b694ffb1675e5975148e1121810081dbdffe\n"
"author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"
"committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"

#. type: delimited block -
#: ../../gittutorial-2.txt:77 ../../gittutorial-2.txt:180
#, fuzzy, no-wrap
msgid "initial commit\n"
msgstr "initial commit\n"

#. type: Plain text
#: ../../gittutorial-2.txt:84
#, fuzzy
msgid ""
"A tree can refer to one or more \"blob\" objects, each corresponding to a "
"file.  In addition, a tree can also refer to other tree objects, thus "
"creating a directory hierarchy.  You can examine the contents of any tree "
"using ls-tree (remember that a long enough initial portion of the SHA-1 will "
"also work):"
msgstr ""
"ツリー(tree)は １つないし複数の \"blob\" オブジェクトを参照することができま"
"す。 各 blob オブジェクトは１つのファイルに対応しています。 さらに、tree は "
"他の tree オブジェクトを参照しています。 このようにしてディレクトリ階層を作成"
"しています。 ls-tree を使用すると任意のツリーのコンテンツを試すことができま"
"す。 (SHA1値の最初の数文字を使用すれば十分なことを思い出してください)"

#. type: delimited block -
#: ../../gittutorial-2.txt:88
#, fuzzy, no-wrap
msgid ""
"$ git ls-tree 92b8b694\n"
"100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt\n"
msgstr ""
"$ git ls-tree 92b8b694\n"
"100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad    file.txt\n"

#. type: Plain text
#: ../../gittutorial-2.txt:92
#, fuzzy
msgid ""
"Thus we see that this tree has one file in it.  The SHA-1 hash is a "
"reference to that file's data:"
msgstr ""
"このように、この tree は１つのファイルを持っていることがわかります。 SHA1 "
"ハッシュ値はそのファイルのデータを参照しています。"

#. type: delimited block -
#: ../../gittutorial-2.txt:96
#, fuzzy, no-wrap
msgid ""
"$ git cat-file -t 3b18e512\n"
"blob\n"
msgstr ""
"$ git cat-file -t 3b18e512\n"
"blob\n"

#. type: Plain text
#: ../../gittutorial-2.txt:99
#, fuzzy
msgid "A \"blob\" is just file data, which we can also examine with cat-file:"
msgstr ""
"\"blob\" は単なるファイルデータです。 cat-file を使用することでそのことがわか"
"ります。"

#. type: delimited block -
#: ../../gittutorial-2.txt:103
#, fuzzy, no-wrap
msgid ""
"$ git cat-file blob 3b18e512\n"
"hello world\n"
msgstr ""
"$ git cat-file blob 3b18e512\n"
"hello world\n"

#. type: Plain text
#: ../../gittutorial-2.txt:108
#, fuzzy
msgid ""
"Note that this is the old file data; so the object that Git named in its "
"response to the initial tree was a tree with a snapshot of the directory "
"state that was recorded by the first commit."
msgstr ""
"これは過去のファイルデータであることに注意してください。； つまり git は最初"
"のツリーに対する自身の応答により名前をつけたオブジェクトは、 最初のコミットに"
"よって記録されたディレクトリ状態のスナップショットを 持ったツリーになっていま"
"す。"

#. type: Plain text
#: ../../gittutorial-2.txt:111
#, fuzzy
msgid ""
"All of these objects are stored under their SHA-1 names inside the Git "
"directory:"
msgstr ""
"これらオブジェクトの全ては、git ディレクトリ内の SHA1値 に従い記録されていま"
"す。"

#. type: delimited block -
#: ../../gittutorial-2.txt:129
#, fuzzy, no-wrap
msgid ""
"$ find .git/objects/\n"
".git/objects/\n"
".git/objects/pack\n"
".git/objects/info\n"
".git/objects/3b\n"
".git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad\n"
".git/objects/92\n"
".git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe\n"
".git/objects/54\n"
".git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7\n"
".git/objects/a0\n"
".git/objects/a0/423896973644771497bdc03eb99d5281615b51\n"
".git/objects/d0\n"
".git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59\n"
".git/objects/c4\n"
".git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241\n"
msgstr ""
"$ find .git/objects/\n"
".git/objects/\n"
".git/objects/pack\n"
".git/objects/info\n"
".git/objects/3b\n"
".git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad\n"
".git/objects/92\n"
".git/objects/92/b8b694ffb1675e5975148e1121810081dbdffe\n"
".git/objects/54\n"
".git/objects/54/196cc2703dc165cbd373a65a4dcf22d50ae7f7\n"
".git/objects/a0\n"
".git/objects/a0/423896973644771497bdc03eb99d5281615b51\n"
".git/objects/d0\n"
".git/objects/d0/492b368b66bdabf2ac1fd8c92b39d3db916e59\n"
".git/objects/c4\n"
".git/objects/c4/d59f390b9cfd4318117afde11d601c1085f241\n"

#. type: Plain text
#: ../../gittutorial-2.txt:134
#, fuzzy
msgid ""
"and the contents of these files is just the compressed data plus a header "
"identifying their length and their type.  The type is either a blob, a tree, "
"a commit, or a tag."
msgstr ""
"そして、これらファイルの中身は、圧縮されたデータと、それらの長さと種別を 特定"
"するヘッダで構成されています。 種別には blob, tree, commit, tag があります。"

#. type: Plain text
#: ../../gittutorial-2.txt:137
#, fuzzy
msgid ""
"The simplest commit to find is the HEAD commit, which we can find from .git/"
"HEAD:"
msgstr ""
"見つけることのできる最も単純な commit は HEAD の commit です。 それは、.git/"
"HEAD で確認できます："

#. type: delimited block -
#: ../../gittutorial-2.txt:141
#, fuzzy, no-wrap
msgid ""
"$ cat .git/HEAD\n"
"ref: refs/heads/master\n"
msgstr ""
"$ cat .git/HEAD\n"
"ref: refs/heads/master\n"

#. type: Plain text
#: ../../gittutorial-2.txt:147
#, fuzzy
msgid ""
"As you can see, this tells us which branch we're currently on, and it tells "
"us this by naming a file under the .git directory, which itself contains a "
"SHA-1 name referring to a commit object, which we can examine with cat-file:"
msgstr ""
"既に見たように、これは、現在どのブランチにいるかを教えてくれています。 そし"
"て、ディレクトリ .git 配下のファイルに名前を付けることでこのことを教えてくれ"
"ます。 それ自身 commit オブジェクトを参照する SHA1 名を含んでおり、 cat-file "
"により確認できます。"

#. type: delimited block -
#: ../../gittutorial-2.txt:158
#, fuzzy, no-wrap
msgid ""
"$ cat .git/refs/heads/master\n"
"c4d59f390b9cfd4318117afde11d601c1085f241\n"
"$ git cat-file -t c4d59f39\n"
"commit\n"
"$ git cat-file commit c4d59f39\n"
"tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59\n"
"parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7\n"
"author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500\n"
"committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500\n"
msgstr ""
"$ cat .git/refs/heads/master\n"
"c4d59f390b9cfd4318117afde11d601c1085f241\n"
"$ git cat-file -t c4d59f39\n"
"commit\n"
"$ git cat-file commit c4d59f39\n"
"tree d0492b368b66bdabf2ac1fd8c92b39d3db916e59\n"
"parent 54196cc2703dc165cbd373a65a4dcf22d50ae7f7\n"
"author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500\n"
"committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143418702 -0500\n"

#. type: delimited block -
#: ../../gittutorial-2.txt:160
#, fuzzy, no-wrap
msgid "add emphasis\n"
msgstr "add emphasis\n"

#. type: Plain text
#: ../../gittutorial-2.txt:163
#, fuzzy
msgid "The \"tree\" object here refers to the new state of the tree:"
msgstr "この \"tree\" オブジェクトはツリーの新しい状態を参照しています："

#. type: delimited block -
#: ../../gittutorial-2.txt:169
#, fuzzy, no-wrap
msgid ""
"$ git ls-tree d0492b36\n"
"100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt\n"
"$ git cat-file blob a0423896\n"
"hello world!\n"
msgstr ""
"$ git ls-tree d0492b36\n"
"100644 blob a0423896973644771497bdc03eb99d5281615b51    file.txt\n"
"$ git cat-file blob a0423896\n"
"hello world!\n"

#. type: Plain text
#: ../../gittutorial-2.txt:172
#, fuzzy
msgid "and the \"parent\" object refers to the previous commit:"
msgstr "そして、\"parent\" オブジェクトは前のコミットを参照しています："

#. type: delimited block -
#: ../../gittutorial-2.txt:178
#, fuzzy, no-wrap
msgid ""
"$ git cat-file commit 54196cc2\n"
"tree 92b8b694ffb1675e5975148e1121810081dbdffe\n"
"author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"
"committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"
msgstr ""
"$ git cat-file commit 54196cc2\n"
"tree 92b8b694ffb1675e5975148e1121810081dbdffe\n"
"author J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"
"committer J. Bruce Fields <bfields@puzzle.fieldses.org> 1143414668 -0500\n"

#. type: Plain text
#: ../../gittutorial-2.txt:184
#, fuzzy
msgid ""
"The tree object is the tree we examined first, and this commit is unusual in "
"that it lacks any parent."
msgstr ""
"この tree オブジェクトは最初に確認した tree です。 そして、このコミットは親が"
"無く、通常と違っています。"

#. type: Plain text
#: ../../gittutorial-2.txt:189
#, fuzzy, no-wrap
msgid ""
"Most commits have only one parent, but it is also common for a commit\n"
"to have multiple parents.   In that case the commit represents a\n"
"merge, with the parent references pointing to the heads of the merged\n"
"branches.\n"
msgstr "大抵のコミットは１つだけ親を持ちますが、複数の親を持つコミットもまた 一般に存在します。そのようなケースではコミットはマージを表現しており、 マージしたブランチの先頭を親として参照しています。"

#. type: Plain text
#: ../../gittutorial-2.txt:193
#, fuzzy
msgid ""
"Besides blobs, trees, and commits, the only remaining type of object is a "
"\"tag\", which we won't discuss here; refer to linkgit:git-tag[1] for "
"details."
msgstr ""
"blob, tree, commit の他に、説明していないオブジェクトは \"tag\" オブジェクト "
"だけです。 tag オブジェクトはここでは議論しません； 詳細は linkgit:git-tag"
"[1] を参照してください。"

#. type: Plain text
#: ../../gittutorial-2.txt:196
#, fuzzy
msgid ""
"So now we know how Git uses the object database to represent a project's "
"history:"
msgstr ""
"さて、ここまでで、git がプロジェクトの履歴を表現するために どのようにオブジェ"
"クトデータベースを使用するかを見てきました。"

#. type: Plain text
#: ../../gittutorial-2.txt:201
#, fuzzy
msgid ""
"\"commit\" objects refer to \"tree\" objects representing the snapshot of a "
"directory tree at a particular point in the history, and refer to \"parent\" "
"commits to show how they're connected into the project history."
msgstr ""
"\"commit\" オブジェクトは、履歴の特定時点におけるディレクトリツリーの スナッ"
"プショットを表現した \"tree\" オブジェクトを参照し、 また、\"parent\" のコ"
"ミットを参照し、プロジェクトの履歴がどのように接続されているかを 教えてくれま"
"す。"

#. type: Plain text
#: ../../gittutorial-2.txt:204
#, fuzzy
msgid ""
"\"tree\" objects represent the state of a single directory, associating "
"directory names to \"blob\" objects containing file data and \"tree\" "
"objects containing subdirectory information."
msgstr ""
"\"tree\" オブジェクトは、１つのディレクトリ状態を表現し、 ディレクトリの名前"
"を、ファイルデータを含む \"blob\" オブジェクトと サブディレクトリの情報を含ん"
"だ \"tree\" オブジェクトと結び付けます。"

#. type: Plain text
#: ../../gittutorial-2.txt:205
#, fuzzy
msgid "\"blob\" objects contain file data without any other structure."
msgstr ""
"\"blob\" オブジェクトは、ファイルの中身を含んでいて、それ以外の構造を持ちませ"
"ん。"

#. type: Plain text
#: ../../gittutorial-2.txt:207
#, fuzzy
msgid ""
"References to commit objects at the head of each branch are stored in files "
"under .git/refs/heads/."
msgstr ""
"各ブランチの先端のコミットオブジェクトの参照は .git/refs/heads/ 下にあるファ"
"イルに記録されています。"

#. type: Plain text
#: ../../gittutorial-2.txt:208
#, fuzzy
msgid "The name of the current branch is stored in .git/HEAD."
msgstr "現在いるブランチの名前は .git/HEAD に記録されています。"

#. type: Plain text
#: ../../gittutorial-2.txt:214
#, fuzzy
msgid ""
"Note, by the way, that lots of commands take a tree as an argument.  But as "
"we can see above, a tree can be referred to in many different ways--by the "
"SHA-1 name for that tree, by the name of a commit that refers to the tree, "
"by the name of a branch whose head refers to that tree, etc.--and most such "
"commands can accept any of these names."
msgstr ""
"注意：ところで、多くのコマンドが tree を引数にとることに注意してください。 し"
"かし、上記で見たように、tree は様々な方法で参照されています。 -- tree の SHA1"
"名や、tree を参照する commit 名や、head が参照している tree のブランチ名な"
"ど。-- そして、多くのそのようなコマンドは これらの名前を受け付けることができ"
"ます。"

#. type: Plain text
#: ../../gittutorial-2.txt:217
#, fuzzy
msgid ""
"In command synopses, the word \"tree-ish\" is sometimes used to designate "
"such an argument."
msgstr ""
"コマンドの使用法では、\"tree-ish\" という言葉で、そのような引数を 表すことが"
"あります。"

#. type: Title -
#: ../../gittutorial-2.txt:219
#, fuzzy, no-wrap
msgid "The index file"
msgstr "索引ファイル"

#. type: Plain text
#: ../../gittutorial-2.txt:225
#, fuzzy
msgid ""
"The primary tool we've been using to create commits is `git-commit -a`, "
"which creates a commit including every change you've made to your working "
"tree.  But what if you want to commit changes only to certain files? Or only "
"certain changes to certain files?"
msgstr ""
"コミットをする時に使用する主要なツールは `git-commit-a` です。 このコマンド"
"は、作業ツリーにて行った全ての変更を含んだコミットを作成します。 しかし、特定"
"のファイルの変更だけをコミットに含めたい場合はありませんか？ もしくは、特定の"
"ファイルの特定の変更だけ？"

#. type: Plain text
#: ../../gittutorial-2.txt:228
#, fuzzy
msgid ""
"If we look at the way commits are created under the cover, we'll see that "
"there are more flexible ways creating commits."
msgstr ""
"コミットが作成される手順を以下でみてゆくと、 コミットを作成するより柔軟な手順"
"があることがわかります。"

#. type: Plain text
#: ../../gittutorial-2.txt:230
#, fuzzy
msgid "Continuing with our test-project, let's modify file.txt again:"
msgstr "先程の test-project に対して、再度 file.txt を修正しましょう："

#. type: delimited block -
#: ../../gittutorial-2.txt:233
#, fuzzy, no-wrap
msgid "$ echo \"hello world, again\" >>file.txt\n"
msgstr "$ echo \"hello world, again\" >>file.txt\n"

#. type: Plain text
#: ../../gittutorial-2.txt:238
#, fuzzy
msgid ""
"but this time instead of immediately making the commit, let's take an "
"intermediate step, and ask for diffs along the way to keep track of what's "
"happening:"
msgstr ""
"しかし、今回はすぐにはコミットせず、中間的段階をとりましょう。 何がおきている"
"かを追跡する為に diff をとります："

#. type: delimited block -
#: ../../gittutorial-2.txt:248
#, fuzzy, no-wrap
msgid ""
"$ git diff\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,2 @@\n"
" hello world!\n"
"+hello world, again\n"
"$ git add file.txt\n"
"$ git diff\n"
msgstr ""
"$ git diff\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,2 @@\n"
" hello world!\n"
"+hello world, again\n"
"$ git add file.txt\n"
"$ git diff\n"

#. type: Plain text
#: ../../gittutorial-2.txt:252
#, fuzzy
msgid ""
"The last diff is empty, but no new commits have been made, and the head "
"still doesn't contain the new line:"
msgstr ""
"最後の diff は空ですが、まだ新しいコミットは作成されていません。 head には 新"
"しい行は含まれていません："

#. type: delimited block -
#: ../../gittutorial-2.txt:262
#, fuzzy, no-wrap
msgid ""
"$ git diff HEAD\n"
"diff --git a/file.txt b/file.txt\n"
"index a042389..513feba 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,2 @@\n"
" hello world!\n"
"+hello world, again\n"
msgstr ""
"$ git diff HEAD\n"
"diff --git a/file.txt b/file.txt\n"
"index a042389..513feba 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,2 @@\n"
" hello world!\n"
"+hello world, again\n"

#. type: Plain text
#: ../../gittutorial-2.txt:268
#, fuzzy
msgid ""
"So 'git diff' is comparing against something other than the head.  The thing "
"that it's comparing against is actually the index file, which is stored in ."
"git/index in a binary format, but whose contents we can examine with ls-"
"files:"
msgstr ""
"従って 'git-diff' は head 以外の何かと比較していることになります。 何に対して"
"比較しているかというと、実のところ索引ファイルと比較しているのです。 索引ファ"
"イルは .git/index にバイナリ形式で記録されていて、その中身は ls-files を用い"
"て確認できます："

#. type: delimited block -
#: ../../gittutorial-2.txt:277
#, fuzzy, no-wrap
msgid ""
"$ git ls-files --stage\n"
"100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt\n"
"$ git cat-file -t 513feba2\n"
"blob\n"
"$ git cat-file blob 513feba2\n"
"hello world!\n"
"hello world, again\n"
msgstr ""
"$ git ls-files --stage\n"
"100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt\n"
"$ git cat-file -t 513feba2\n"
"blob\n"
"$ git cat-file blob 513feba2\n"
"hello world!\n"
"hello world, again\n"

#. type: Plain text
#: ../../gittutorial-2.txt:283
#, fuzzy
msgid ""
"So what our 'git add' did was store a new blob and then put a reference to "
"it in the index file.  If we modify the file again, we'll see that the new "
"modifications are reflected in the 'git diff' output:"
msgstr ""
"従って 'git-add' をすると、新しい blob が記録され、 索引ファイルにその参照が"
"記録されます。 そのファイルが再び変更されたならば、その新しい変更は 'git-"
"diff' の 出力に反映されます："

#. type: delimited block -
#: ../../gittutorial-2.txt:294
#, fuzzy, no-wrap
msgid ""
"$ echo 'again?' >>file.txt\n"
"$ git diff\n"
"index 513feba..ba3da7b 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1,2 +1,3 @@\n"
" hello world!\n"
" hello world, again\n"
"+again?\n"
msgstr ""
"$ echo 'again?' >>file.txt\n"
"$ git diff\n"
"index 513feba..ba3da7b 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1,2 +1,3 @@\n"
" hello world!\n"
" hello world, again\n"
"+again?\n"

#. type: Plain text
#: ../../gittutorial-2.txt:299
#, fuzzy
msgid ""
"With the right arguments, 'git diff' can also show us the difference between "
"the working directory and the last commit, or between the index and the last "
"commit:"
msgstr ""
"正しい引数を用いると、'git-diff' は作業ディレクトリと最後のコミットとの 差分"
"や、索引と最後のコミットとの差分を表示することができます："

#. type: delimited block -
#: ../../gittutorial-2.txt:318
#, fuzzy, no-wrap
msgid ""
"$ git diff HEAD\n"
"diff --git a/file.txt b/file.txt\n"
"index a042389..ba3da7b 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,3 @@\n"
" hello world!\n"
"+hello world, again\n"
"+again?\n"
"$ git diff --cached\n"
"diff --git a/file.txt b/file.txt\n"
"index a042389..513feba 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,2 @@\n"
" hello world!\n"
"+hello world, again\n"
msgstr ""
"$ git diff HEAD\n"
"diff --git a/file.txt b/file.txt\n"
"index a042389..ba3da7b 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,3 @@\n"
" hello world!\n"
"+hello world, again\n"
"+again?\n"
"$ git diff --cached\n"
"diff --git a/file.txt b/file.txt\n"
"index a042389..513feba 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1 +1,2 @@\n"
" hello world!\n"
"+hello world, again\n"

#. type: Plain text
#: ../../gittutorial-2.txt:324
#, fuzzy
msgid ""
"At any time, we can create a new commit using 'git commit' (without the \"-a"
"\" option), and verify that the state committed only includes the changes "
"stored in the index file, not the additional change that is still only in "
"our working tree:"
msgstr ""
"任意の時点で (\"-a\" オプションを使用せずに) 'git-commit' を使用して 新しいコ"
"ミットを作成できます。 そして、その状態は索引ファイルに記録された変更だけを含"
"んでいて、 作業ディレクトリでだけ行われている追加の変更は含んでいないことを確"
"認できます："

#. type: delimited block -
#: ../../gittutorial-2.txt:336
#, fuzzy, no-wrap
msgid ""
"$ git commit -m \"repeat\"\n"
"$ git diff HEAD\n"
"diff --git a/file.txt b/file.txt\n"
"index 513feba..ba3da7b 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1,2 +1,3 @@\n"
" hello world!\n"
" hello world, again\n"
"+again?\n"
msgstr ""
"$ git commit -m \"repeat\"\n"
"$ git diff HEAD\n"
"diff --git a/file.txt b/file.txt\n"
"index 513feba..ba3da7b 100644\n"
"--- a/file.txt\n"
"+++ b/file.txt\n"
"@@ -1,2 +1,3 @@\n"
" hello world!\n"
" hello world, again\n"
"+again?\n"

#. type: Plain text
#: ../../gittutorial-2.txt:341
#, fuzzy
msgid ""
"So by default 'git commit' uses the index to create the commit, not the "
"working tree; the \"-a\" option to commit tells it to first update the index "
"with all changes in the working tree."
msgstr ""
"従ってデフォルトでは 'git-commit' はコミットを作成する際に索引を使用していて "
"作業ツリーは使用していないことがわかります；コミット時の \"-a\" オプションは "
"最初に作業ツリー内の全ての変更を含むように索引を更新することを表しています。"

#. type: Plain text
#: ../../gittutorial-2.txt:344
#, fuzzy
msgid ""
"Finally, it's worth looking at the effect of 'git add' on the index file:"
msgstr ""
"最後に、索引ファイルにおける 'git-add' の効果について見ておきましょう："

#. type: delimited block -
#: ../../gittutorial-2.txt:348
#, fuzzy, no-wrap
msgid ""
"$ echo \"goodbye, world\" >closing.txt\n"
"$ git add closing.txt\n"
msgstr ""
"$ echo \"goodbye, world\" >closing.txt\n"
"$ git add closing.txt\n"

#. type: Plain text
#: ../../gittutorial-2.txt:351
#, fuzzy
msgid "The effect of the 'git add' was to add one entry to the index file:"
msgstr "'git-add' の効果は、索引ファイルにひとつのエントリを追加することです："

#. type: delimited block -
#: ../../gittutorial-2.txt:356
#, fuzzy, no-wrap
msgid ""
"$ git ls-files --stage\n"
"100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt\n"
"100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt\n"
msgstr ""
"$ git ls-files --stage\n"
"100644 8b9743b20d4b15be3955fc8d5cd2b09cd2336138 0       closing.txt\n"
"100644 513feba2e53ebbd2532419ded848ba19de88ba00 0       file.txt\n"

#. type: Plain text
#: ../../gittutorial-2.txt:360
#, fuzzy
msgid ""
"And, as you can see with cat-file, this new entry refers to the current "
"contents of the file:"
msgstr ""
"そして、cat-file を用いてこれを確認できます。 この新しいエントリは、現在の"
"ファイルのコンテンツを参照しています："

#. type: delimited block -
#: ../../gittutorial-2.txt:364
#, fuzzy, no-wrap
msgid ""
"$ git cat-file blob 8b9743b2\n"
"goodbye, world\n"
msgstr ""
"$ git cat-file blob 8b9743b2\n"
"goodbye, world\n"

#. type: Plain text
#: ../../gittutorial-2.txt:368
#, fuzzy
msgid ""
"The \"status\" command is a useful way to get a quick summary of the "
"situation:"
msgstr "\"status\" コマンドは状態の概要を迅速に取得する簡単な方法です："

#. type: delimited block -
#: ../../gittutorial-2.txt:382
#, fuzzy, no-wrap
msgid ""
"$ git status\n"
"# On branch master\n"
"# Changes to be committed:\n"
"#   (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#       new file: closing.txt\n"
"#\n"
"# Changes not staged for commit:\n"
"#   (use \"git add <file>...\" to update what will be committed)\n"
"#\n"
"#       modified: file.txt\n"
"#\n"
msgstr ""
"$ git status\n"
"# On branch master\n"
"# Changes to be committed:\n"
"#   (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#       new file: closing.txt\n"
"#\n"
"# Changed but not updated:\n"
"#   (use \"git add <file>...\" to update what will be committed)\n"
"#\n"
"#       modified: file.txt\n"
"#\n"

#. type: Plain text
#: ../../gittutorial-2.txt:390
#, fuzzy
msgid ""
"Since the current state of closing.txt is cached in the index file, it is "
"listed as \"Changes to be committed\".  Since file.txt has changes in the "
"working directory that aren't reflected in the index, it is marked \"changed "
"but not updated\".  At this point, running \"git commit\" would create a "
"commit that added closing.txt (with its new contents), but that didn't "
"modify file.txt."
msgstr ""
"closing.txt の現在の状態は索引ファイルにキャッシュされている為、 \"Changes "
"to be committed\"(コミットされるべき変更)としてリストされます。 file.txt は作"
"業ディレクトリ内で変更されているが索引ファイルに反映されていない為、 "
"\"changed but not updated\"(変更されているが更新されていない) と印付けされて"
"います。 この観点から \"git commit\" を実行すると、closing.txt (新しいコンテ"
"ンツを含む) が追加された、 コミットが作成され、file.txt の変更は含みないこと"
"がわかります。"

#. type: Plain text
#: ../../gittutorial-2.txt:394
#, fuzzy
msgid ""
"Also, note that a bare `git diff` shows the changes to file.txt, but not the "
"addition of closing.txt, because the version of closing.txt in the index "
"file is identical to the one in the working directory."
msgstr ""
"また、裸の `git diff` は file.txt の変更を表示するが、追加した closing.txt "
"は 含まないことに注意してください。何故なら索引ファイル内の closing.txt の"
"バージョンは 作業ディレクトリ内のものと同一だからです。"

#. type: Plain text
#: ../../gittutorial-2.txt:400
#, fuzzy
msgid ""
"In addition to being the staging area for new commits, the index file is "
"also populated from the object database when checking out a branch, and is "
"used to hold the trees involved in a merge operation.  See linkgit:gitcore-"
"tutorial[7] and the relevant man pages for details."
msgstr ""
"新しいコミットの為に終結した領域であるということに加えて、 索引ファイルはブラ"
"ンチを作成する時にオブジェクトデータベースから利用されます。 そして、マージ操"
"作によって引き起こされる tree を保持するためにも使用されます。 詳細は "
"linkgit:gitcore-tutorial[7] と 関連する man ページを 参照してください。"

#. type: Title -
#: ../../gittutorial-2.txt:402
#, fuzzy, no-wrap
msgid "What next?"
msgstr "その次は何？"

#. type: Plain text
#: ../../gittutorial-2.txt:408
#, fuzzy
msgid ""
"At this point you should know everything necessary to read the man pages for "
"any of the git commands; one good place to start would be with the commands "
"mentioned in link:everyday.html[Everyday Git].  You should be able to find "
"any unknown jargon in linkgit:gitglossary[7]."
msgstr ""
"この時点で、git コマンドの man ページを読む為に必要な全てを理解したはずで"
"す； もうひとつの利用開始の為の良い場所は link:everyday.html[毎日の git] 内"
"の コマンドに対する説明です。また、全ての知らない専門用語は linkgit:"
"gitglossary[7] 内に 見つけることができるでしょう。"

#. type: Plain text
#: ../../gittutorial-2.txt:411
#, fuzzy
msgid ""
"The link:user-manual.html[Git User's Manual] provides a more comprehensive "
"introduction to Git."
msgstr ""
"The link:user-manual.html[Git User's Manual] provides a more comprehensive "
"introduction to git."

#. type: Plain text
#: ../../gittutorial-2.txt:415
#, fuzzy
msgid ""
"linkgit:gitcvs-migration[7] explains how to import a CVS repository into "
"Git, and shows how to use Git in a CVS-like way."
msgstr ""
"linkgit:gitcvs-migration[7] のドキュメントは CVS リポジトリを git にインポー"
"トする方法を説明しており、 CVS のような方法で git を使用する方法を示していま"
"す。"

#. type: Plain text
#: ../../gittutorial-2.txt:418
#, fuzzy
msgid ""
"For some interesting examples of Git use, see the link:howto-index.html"
"[howtos]."
msgstr ""
"面白い git 使用例を知りたい方は、link:howto-index.html[howtos] を参照してくだ"
"さい。"

#. type: Plain text
#: ../../gittutorial-2.txt:422
#, fuzzy
msgid ""
"For Git developers, linkgit:gitcore-tutorial[7] goes into detail on the "
"lower-level Git mechanisms involved in, for example, creating a new commit."
msgstr ""
"git 開発者は linkgit:gitcore-tutorial[7] が (例えば新しいコミットの作成のよう"
"な)下位レベルの git メカニズムの 詳細を説明しているので、そちらに進んでくださ"
"い。"

#. type: Plain text
#: ../../gittutorial-2.txt:432
#, fuzzy
msgid ""
"linkgit:gittutorial[7], linkgit:gitcvs-migration[7], linkgit:gitcore-tutorial"
"[7], linkgit:gitglossary[7], linkgit:git-help[1], link:everyday.html"
"[Everyday Git], link:user-manual.html[The Git User's Manual]"
msgstr ""
"linkgit:gittutorial[7], linkgit:gitcvs-migration[7], linkgit:gitcore-tutorial"
"[7], linkgit:gitglossary[7], linkgit:git-help[1], link:everyday.html"
"[Everyday git], link:user-manual.html[The Git User's Manual]"
