# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-12-07 00:31+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Title -
#: ../../git.txt:5 ../../gittutorial.txt:5 ../../gittutorial-2.txt:5
#: ../../git-add.txt:5 ../../git-bisect.txt:6 ../../git-cherry-pick.txt:5
#: ../../git-clean.txt:5 ../../git-grep.txt:5 ../../gitglossary.txt:5
#, no-wrap
msgid "NAME"
msgstr "名前"

#. type: Title -
#: ../../git.txt:10 ../../gittutorial.txt:9 ../../gittutorial-2.txt:9
#: ../../git-add.txt:9 ../../git-bisect.txt:10 ../../git-cherry-pick.txt:9
#: ../../git-clean.txt:9 ../../git-grep.txt:10 ../../gitglossary.txt:9
#, no-wrap
msgid "SYNOPSIS"
msgstr "書式"

#. type: Title -
#: ../../git.txt:19 ../../gittutorial.txt:14 ../../gittutorial-2.txt:14
#: ../../git-add.txt:17 ../../git-bisect.txt:14 ../../git-cherry-pick.txt:13
#: ../../git-clean.txt:14 ../../git-grep.txt:28 ../../gitglossary.txt:13
#, no-wrap
msgid "DESCRIPTION"
msgstr "説明"

#. type: Title -
#: ../../git.txt:966 ../../gittutorial.txt:664 ../../gittutorial-2.txt:424
#: ../../git-add.txt:396 ../../git-bisect.txt:333 ../../gitglossary.txt:18
#, no-wrap
msgid "SEE ALSO"
msgstr "関連項目"

#. type: Title -
#: ../../git.txt:974 ../../gittutorial.txt:675 ../../gittutorial-2.txt:434
#: ../../git-add.txt:405 ../../git-bisect.txt:338 ../../git-cherry-pick.txt:83
#: ../../git-clean.txt:63 ../../git-grep.txt:201 ../../gitglossary.txt:26
#, no-wrap
msgid "GIT"
msgstr "GIT"

#. type: Plain text
#: ../../git.txt:975 ../../git-add.txt:406 ../../git-bisect.txt:339
#: ../../git-cherry-pick.txt:84 ../../git-clean.txt:64 ../../git-grep.txt:202
msgid "Part of the linkgit:git[1] suite"
msgstr "linkgit:git[1] スイートの一部"

#. type: Title -
#: ../../git-add.txt:179 ../../git-bisect.txt:260
#, fuzzy, no-wrap
msgid "EXAMPLES"
msgstr "EXAMPLES"

#. type: Title =
#: ../../git-bisect.txt:3
#, fuzzy, no-wrap
msgid "git-bisect(1)"
msgstr "git-bisect(1)"

#. type: Plain text
#: ../../git-bisect.txt:8
#, fuzzy
msgid "git-bisect - Find by binary search the change that introduced a bug"
msgstr "git-bisect - バグの発生した変更箇所を、二分探索で見つける"

#. type: Plain text
#: ../../git-bisect.txt:12
#, fuzzy
msgid "'git bisect' <subcommand> <options>"
msgstr "'git bisect' <subcommand> <options>"

#. type: Plain text
#: ../../git-bisect.txt:17
#, fuzzy
msgid ""
"The command takes various subcommands, and different options depending on "
"the subcommand:"
msgstr ""
"このコマンドは様々なサブコマンドと、それに関連した異なるオプションを取ります"

#. type: Plain text
#: ../../git-bisect.txt:28
#, fuzzy, no-wrap
msgid ""
" git bisect help\n"
" git bisect start [<bad> [<good>...]] [--] [<paths>...]\n"
" git bisect bad [<rev>]\n"
" git bisect good [<rev>...]\n"
" git bisect skip [(<rev>|<range>)...]\n"
" git bisect reset [<commit>]\n"
" git bisect visualize\n"
" git bisect replay <logfile>\n"
" git bisect log\n"
" git bisect run <cmd>...\n"
msgstr ""
" git bisect help\n"
" git bisect start [<bad> [<good>...]] [--] [<paths>...]\n"
" git bisect bad [<rev>]\n"
" git bisect good [<rev>...]\n"
" git bisect skip [(<rev>|<range>)...]\n"
" git bisect reset [<commit>]\n"
" git bisect visualize\n"
" git bisect replay <logfile>\n"
" git bisect log\n"
" git bisect run <cmd>...\n"

#. type: Plain text
#: ../../git-bisect.txt:32
#, fuzzy
msgid ""
"This command uses 'git rev-list --bisect' to help drive the binary search "
"process to find which change introduced a bug, given an old \"good\" commit "
"object name and a later \"bad\" commit object name."
msgstr ""
"このコマンドは'git rev-list --bisect'を利用して、 与えられた過去の\"正常な"
"\"コミットと、それより後に起きた\"不正な\"コミットを渡して 二分探索によりバグ"
"の発生した変更を探すのを手伝ってくれます。"

#. type: Title ~
#: ../../git-bisect.txt:34
#, fuzzy, no-wrap
msgid "Getting help"
msgstr "ヘルプの使い方"

#. type: Plain text
#: ../../git-bisect.txt:38
#, fuzzy
msgid ""
"Use \"git bisect\" to get a short usage description, and \"git bisect help\" "
"or \"git bisect -h\" to get a long usage description."
msgstr ""
"\"git bisect\" は短い使い方の説明を得るのに使われ、 \"git bisect help\" また"
"は \"git bisect -h\" は長い使い方の説明を得るのに使われます。"

#. type: Title ~
#: ../../git-bisect.txt:40
#, fuzzy, no-wrap
msgid "Basic bisect commands: start, bad, good"
msgstr "基本的なbisectコマンド: start, bad, good"

#. type: Plain text
#: ../../git-bisect.txt:44
#, fuzzy
msgid ""
"Using the Linux kernel tree as an example, basic use of the bisect command "
"is as follows:"
msgstr ""
"例として、Linuxカーネルツリーに使ってみます、 基本的なbisectコマンドの使い方"
"は下のようになります。"

#. type: delimited block -
#: ../../git-bisect.txt:50
#, fuzzy, no-wrap
msgid ""
"$ git bisect start\n"
"$ git bisect bad                 # Current version is bad\n"
"$ git bisect good v2.6.13-rc2    # v2.6.13-rc2 was the last version\n"
"                                 # tested that was good\n"
msgstr ""
"$ git bisect start\n"
"$ git bisect bad                 # 現在のバージョンは駄目\n"
"$ git bisect good v2.6.13-rc2    # タグ v2.6.13-rc2 は、テストが成功した\n"
"                                 # 一番最後のバージョン\n"

#. type: Plain text
#: ../../git-bisect.txt:55
#, fuzzy
msgid ""
"When you have specified at least one bad and one good version, the command "
"bisects the revision tree and outputs something similar to the following:"
msgstr ""
"あなたがすくなくとも１つづつ失敗と成功のリビジョンを指定すると、 bisect コマ"
"ンドはリビジョンツリーを分割し、下記のようなメッセージを出力します。"

#. type: delimited block -
#: ../../git-bisect.txt:58
#, fuzzy, no-wrap
msgid "Bisecting: 675 revisions left to test after this\n"
msgstr ""
"Bisecting: 675 revisions left to test after this\n"
"# 訳注：\"分割中: テストするリビジョンは残り675件\" という意味\n"

#. type: Plain text
#: ../../git-bisect.txt:63
#, fuzzy
msgid ""
"The state in the middle of the set of revisions is then checked out.  You "
"would now compile that kernel and boot it. If the booted kernel works "
"correctly, you would then issue the following command:"
msgstr ""
"メッセージ出力後、good と bad の中間に位置するリビジョンがチェックアウトされ"
"ます。 そうしたら、ただちにカーネルをコンパイル、実行してみましょう。 もし"
"カーネルが正しく動作したら、以下のコマンドを入力します。"

#. type: delimited block -
#: ../../git-bisect.txt:66
#, fuzzy, no-wrap
msgid "$ git bisect good\t\t\t# this one is good\n"
msgstr "$ git bisect good\t\t\t# これはOK\n"

#. type: Plain text
#: ../../git-bisect.txt:69
#, fuzzy
msgid "The output of this command would be something similar to the following:"
msgstr "コマンドの出力は以下のようなものになるでしょう:"

#. type: delimited block -
#: ../../git-bisect.txt:72
#, fuzzy, no-wrap
msgid "Bisecting: 337 revisions left to test after this\n"
msgstr ""
"Bisecting: 337 revisions left to test after this\n"
"# 訳注：\"分割中 : テストするリビジョンは残り337件\" という意味\n"

#. type: Plain text
#: ../../git-bisect.txt:77
#, fuzzy
msgid ""
"You keep repeating this process, compiling the tree, testing it, and "
"depending on whether it is good or bad issuing the command \"git bisect good"
"\" or \"git bisect bad\" to ask for the next bisection."
msgstr ""
"ツリーをコンパイル、テストし、成功か失敗に応じて、 \"git bisect good\" もしく"
"は \"git bisect bad\" を発行し、 次の二分先を決定するというプロセスを繰り返し"
"ます。"

#. type: Plain text
#: ../../git-bisect.txt:80
#, fuzzy
msgid ""
"Eventually there will be no more revisions left to bisect, and you will have "
"been left with the first bad kernel revision in \"refs/bisect/bad\"."
msgstr ""
"最終的に、これ以上リビジョンを分割出来ない状態になります。 そして、\"refs/"
"bisect/bad\"には最初に悪い状態になったカーネルのリビジョンが残されているで"
"しょう。"

#. type: Title ~
#: ../../git-bisect.txt:82
#, fuzzy, no-wrap
msgid "Bisect reset"
msgstr "Bisect reset"

#. type: Plain text
#: ../../git-bisect.txt:86
#, fuzzy
msgid ""
"After a bisect session, to clean up the bisection state and return to the "
"original HEAD, issue the following command:"
msgstr ""
"bisectセッションの後に、二分された状態を元に戻し 最初のHEADに戻るためには、以"
"下のコマンドを実行して下さい:"

#. type: delimited block -
#: ../../git-bisect.txt:89 ../../user-manual.txt:515
#, fuzzy, no-wrap
msgid "$ git bisect reset\n"
msgstr "$ git bisect reset\n"

#. type: Plain text
#: ../../git-bisect.txt:94
#, fuzzy
msgid ""
"By default, this will return your tree to the commit that was checked out "
"before `git bisect start`.  (A new `git bisect start` will also do that, as "
"it cleans up the old bisection state.)"
msgstr ""
"通常、これは`git bisect start`する前に取り出されていたコミット状態に あなたの"
"ツリーを戻すでしょう。(また、新しい`git bisect start`した場合でも、 古い二分"
"状態はクリーンアップされるでしょう.)"

#. type: Plain text
#: ../../git-bisect.txt:97
#, fuzzy
msgid ""
"With an optional argument, you can return to a different commit instead:"
msgstr ""
"オプションの引数を指定する場合は、代わりに別のコミットに戻すことが出来ます。"

#. type: delimited block -
#: ../../git-bisect.txt:100
#, fuzzy, no-wrap
msgid "$ git bisect reset <commit>\n"
msgstr "$ git bisect reset <commit>\n"

#. type: Plain text
#: ../../git-bisect.txt:105
#, fuzzy
msgid ""
"For example, `git bisect reset HEAD` will leave you on the current bisection "
"commit and avoid switching commits at all, while `git bisect reset bisect/"
"bad` will check out the first bad revision."
msgstr ""
"例を挙げると、`git bisect reset HEAD` は現在のbisectコミットを残したまま、 切"
"り替えていったコミットを全て無効にします。 `git bisect reset bisect/bad` は最"
"初にbadマークを付けたリビジョンをチェックアウトします。"

#. type: Title ~
#: ../../git-bisect.txt:107
#, fuzzy, no-wrap
msgid "Bisect visualize"
msgstr "Bisectの視覚化"

#. type: Plain text
#: ../../git-bisect.txt:111
#, fuzzy
msgid ""
"To see the currently remaining suspects in 'gitk', issue the following "
"command during the bisection process:"
msgstr ""
"'gitk'を使って現在の疑わしい候補の残りを見るには、 bisectを実行中に下のコマン"
"ドを実行して下さい。"

#. type: delimited block -
#: ../../git-bisect.txt:114 ../../user-manual.txt:527
#, fuzzy, no-wrap
msgid "$ git bisect visualize\n"
msgstr "$ git bisect visualize\n"

#. type: Plain text
#: ../../git-bisect.txt:117
#, fuzzy
msgid "`view` may also be used as a synonym for `visualize`."
msgstr "`view` も`visualize`の同義語として使用することが出来ます。"

#. type: Plain text
#: ../../git-bisect.txt:121
#, fuzzy
msgid ""
"If the 'DISPLAY' environment variable is not set, 'git log' is used "
"instead.  You can also give command line options such as `-p` and `--stat`."
msgstr ""
"もし'DISPLAY'環境変数が設定されていなければ、代わりに'git log'が使われます。 "
"同様のことは `-p` や `--stat` をオプションとして与えることで出来ます。"

#. type: delimited block -
#: ../../git-bisect.txt:124
#, fuzzy, no-wrap
msgid "$ git bisect view --stat\n"
msgstr "$ git bisect view --stat\n"

#. type: Title ~
#: ../../git-bisect.txt:127
#, fuzzy, no-wrap
msgid "Bisect log and bisect replay"
msgstr "Bisectのログとリプレイ"

#. type: Plain text
#: ../../git-bisect.txt:131
#, fuzzy
msgid ""
"After having marked revisions as good or bad, issue the following command to "
"show what has been done so far:"
msgstr ""
"goodもしくはbadマークを付けた後、 何がどのように行われたかを見るには下記のコ"
"マンドを実行します:"

#. type: delimited block -
#: ../../git-bisect.txt:134
#, fuzzy, no-wrap
msgid "$ git bisect log\n"
msgstr "$ git bisect log\n"

#. type: Plain text
#: ../../git-bisect.txt:140
#, fuzzy
msgid ""
"If you discover that you made a mistake in specifying the status of a "
"revision, you can save the output of this command to a file, edit it to "
"remove the incorrect entries, and then issue the following commands to "
"return to a corrected state:"
msgstr ""
"もしあるリビジョンの状態指定に間違えを発見したら、このコマンドの出力をファイ"
"ルに保存し、 間違えたエントリを削除して編集し、それから下記のコマンドを実行す"
"ると正しい状態へ戻ります。"

#. type: delimited block -
#: ../../git-bisect.txt:144
#, fuzzy, no-wrap
msgid ""
"$ git bisect reset\n"
"$ git bisect replay that-file\n"
msgstr ""
"$ git bisect reset\n"
"$ git bisect replay that-file\n"

#. type: Title ~
#: ../../git-bisect.txt:147
#, fuzzy, no-wrap
msgid "Avoiding testing a commit"
msgstr "コミットテストを回避する"

#. type: Plain text
#: ../../git-bisect.txt:154
#, fuzzy
msgid ""
"If, in the middle of a bisect session, you know that the next suggested "
"revision is not a good one to test (e.g. the change the commit introduces is "
"known not to work in your environment and you know it does not have anything "
"to do with the bug you are chasing), you may want to find a nearby commit "
"and try that instead."
msgstr ""
"もしbisectの途中で、次に提案されたリビジョンがテストに良いものでないことが 分"
"かっている場合(例えば、そのコミットの変更によりあなたの環境で動かなくなり、 "
"それが追っているバグと関係がないということが分かっている時)、 その近くのコ"
"ミットを見つけ代用したいとします。"

#. type: Plain text
#: ../../git-bisect.txt:156
#, fuzzy
msgid "For example:"
msgstr "例:"

#. type: delimited block -
#: ../../git-bisect.txt:163
#, fuzzy, no-wrap
msgid ""
"$ git bisect good/bad\t\t\t# previous round was good or bad.\n"
"Bisecting: 337 revisions left to test after this\n"
"$ git bisect visualize\t\t\t# oops, that is uninteresting.\n"
"$ git reset --hard HEAD~3\t\t# try 3 revisions before what\n"
"\t\t\t\t\t# was suggested\n"
msgstr ""
"$ git bisect good/bad\t\t\t# 前回は good か bad\n"
"Bisecting: 337 revisions left to test after this\n"
"$ git bisect visualize\t\t\t# おっと、こいつはやりづらいな\n"
"$ git reset --hard HEAD~3\t\t# 3つ前のバージョンで\n"
"\t\t\t\t\t# 試してみよう\n"

#. type: Plain text
#: ../../git-bisect.txt:167
#, fuzzy
msgid ""
"Then compile and test the chosen revision, and afterwards mark the revision "
"as good or bad in the usual manner."
msgstr ""
"それから指定されたリビジョンでコンパイルとテストを行い、 その後、いつも通り"
"goodまたはbadマークをリビジョンに設定します。"

#. type: Title ~
#: ../../git-bisect.txt:169
#, fuzzy, no-wrap
msgid "Bisect skip"
msgstr "Bisect skip"

#. type: Plain text
#: ../../git-bisect.txt:173
#, fuzzy
msgid ""
"Instead of choosing by yourself a nearby commit, you can ask git to do it "
"for you by issuing the command:"
msgstr ""
"近くのコミットを自分自身で選択する代わりに、このコマンドによってgitに頼むこと"
"が出来ます。"

#. type: delimited block -
#: ../../git-bisect.txt:176
#, fuzzy, no-wrap
msgid "$ git bisect skip                 # Current version cannot be tested\n"
msgstr "$ git bisect skip                 # このバージョンはテストすることが出来ない\n"

#. type: Plain text
#: ../../git-bisect.txt:180
#, fuzzy
msgid ""
"But git may eventually be unable to tell the first bad commit among a bad "
"commit and one or more skipped commits."
msgstr ""
"しかし最初のbadコミットとの間に、badコミットや、 一つないしそれ以上のskipコ"
"ミットがあると、 gitは結局の所、それは出来ないと伝えてくるかもしれません。"

#. type: Plain text
#: ../../git-bisect.txt:183
#, fuzzy
msgid ""
"You can even skip a range of commits, instead of just one commit, using the "
"\"'<commit1>'..'<commit2>'\" notation. For example:"
msgstr ""
"また、ある特定のコミット範囲をスキップすることが出来ます。 一つのコミットを指"
"定する代わりに、\"'<commit1>'..'<commit2>'\"表記を使います。例:"

#. type: delimited block -
#: ../../git-bisect.txt:186
#, fuzzy, no-wrap
msgid "$ git bisect skip v2.5..v2.6\n"
msgstr "$ git bisect skip v2.5..v2.6\n"

#. type: Plain text
#: ../../git-bisect.txt:190
#, fuzzy
msgid ""
"This tells the bisect process that no commit after `v2.5`, up to and "
"including `v2.6`, should be tested."
msgstr ""
"これは、`v2.5`(含まない)から`v2.6`(含む)以外を テストするようbisectプロセス"
"に 伝えます。"

#. type: Plain text
#: ../../git-bisect.txt:193
#, fuzzy
msgid ""
"Note that if you also want to skip the first commit of the range you would "
"issue the command:"
msgstr ""
"もし最初のコミットもスキップする範囲に含めたい場合は、 下のコマンドを実行する"
"必要があることに注意して下さい。"

#. type: delimited block -
#: ../../git-bisect.txt:196
#, fuzzy, no-wrap
msgid "$ git bisect skip v2.5 v2.5..v2.6\n"
msgstr "$ git bisect skip v2.5 v2.5..v2.6\n"

#. type: Plain text
#: ../../git-bisect.txt:200
#, fuzzy
msgid ""
"This tells the bisect process that the commits between `v2.5` included and "
"`v2.6` included should be skipped."
msgstr ""
"これは、`v2.5`(含む)から`v2.6`(含む)をスキップするようbisectプロセスに 伝えま"
"す。"

#. type: Title ~
#: ../../git-bisect.txt:202
#, fuzzy, no-wrap
msgid "Cutting down bisection by giving more parameters to bisect start"
msgstr "bisect start にたくさんのパラメータを与え、分割量を縮小する"

#. type: Plain text
#: ../../git-bisect.txt:207
#, fuzzy
msgid ""
"You can further cut down the number of trials, if you know what part of the "
"tree is involved in the problem you are tracking down, by specifying path "
"parameters when issuing the `bisect start` command:"
msgstr ""
"もっとテストする回数を少なくすることが出来ます、 問題がツリー(訳注: ディレク"
"トリツリーのこと) のどの部分で起きているかが分かっていれば、 `bisect start` "
"コマンドを実行する際、ファイルパスをパラメータに渡すことが出来ます。"

#. type: delimited block -
#: ../../git-bisect.txt:210
#, fuzzy, no-wrap
msgid "$ git bisect start -- arch/i386 include/asm-i386\n"
msgstr "$ git bisect start -- arch/i386 include/asm-i386\n"

#. type: Plain text
#: ../../git-bisect.txt:215
#, fuzzy
msgid ""
"If you know beforehand more than one good commit, you can narrow the bisect "
"space down by specifying all of the good commits immediately after the bad "
"commit when issuing the `bisect start` command:"
msgstr ""
"もし事前に正しいコミットがもっと分かっていれば、分割領域を絞り込むことが出来"
"ます。 `bisect start` コマンドを発行する際に指定するbadコミットの直後に、 全"
"てのgoodコミットを指定するのです。"

#. type: delimited block -
#: ../../git-bisect.txt:220
#, fuzzy, no-wrap
msgid ""
"$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n"
"                   # v2.6.20-rc6 is bad\n"
"                   # v2.6.20-rc4 and v2.6.20-rc1 are good\n"
msgstr ""
"$ git bisect start v2.6.20-rc6 v2.6.20-rc4 v2.6.20-rc1 --\n"
"                   # v2.6.20-rc6 は正しくない\n"
"                   # v2.6.20-rc4 と v2.6.20-rc1 は正しい\n"

#. type: Title ~
#: ../../git-bisect.txt:223
#, fuzzy, no-wrap
msgid "Bisect run"
msgstr "Bisect run"

#. type: Plain text
#: ../../git-bisect.txt:227
#, fuzzy
msgid ""
"If you have a script that can tell if the current source code is good or "
"bad, you can bisect by issuing the command:"
msgstr ""
"もし、現在のソースコードが正しいか悪いかを教えてくれるスクリプトがあれば、 こ"
"のコマンドを使ってbisectを実行することが出来ます。"

#. type: delimited block -
#: ../../git-bisect.txt:230
#, fuzzy, no-wrap
msgid "$ git bisect run my_script arguments\n"
msgstr "$ git bisect run my_script arguments\n"

#. type: Plain text
#: ../../git-bisect.txt:236
#, fuzzy
msgid ""
"Note that the script (`my_script` in the above example) should exit with "
"code 0 if the current source code is good, and exit with a code between 1 "
"and 127 (inclusive), except 125, if the current source code is bad."
msgstr ""
"スクリプト(上記の例では`my_script`)は 現在のソースコードが正しい場合は0を、 "
"もし現在のソースコードが正しくない場合は、exitコードに125をのぞいた 1から127"
"(含む)を終了コードとして返す必要があることに注意してください。"

#. type: Plain text
#: ../../git-bisect.txt:240
#, fuzzy
msgid ""
"Any other exit code will abort the bisect process. It should be noted that a "
"program that terminates via \"exit(-1)\" leaves $? = 255, (see the exit(3) "
"manual page), as the value is chopped with \"& 0377\"."
msgstr ""
"それ以外の終了コードの場合は、bisectプロセスが強制終了するでしょう。 プログラ"
"ムが \"exit(-1)\"で終了した場合、\"& 0377\"でマスクされ、 $? == 255(訳注: $?"
"はunix等でプログラムの終了コードが格納される環境変数のこと)  になることに注意"
"して下さい。(exit(3)のmanページを見て下さい)"

#. type: Plain text
#: ../../git-bisect.txt:244
#, fuzzy
msgid ""
"The special exit code 125 should be used when the current source code cannot "
"be tested. If the script exits with this code, the current revision will be "
"skipped (see `git bisect skip` above)."
msgstr ""
"特殊な終了コード125は、現在のソースコードがテスト出来ない時に使用して下さ"
"い。 このコードを使用してスクリプトを終了すると、現在のリビジョンはスキップさ"
"れます。 (上記の`git bisect skip`を見て下さい)"

#. type: Plain text
#: ../../git-bisect.txt:250
#, fuzzy
msgid ""
"You may often find that during a bisect session you want to have temporary "
"modifications (e.g. s/#define DEBUG 0/#define DEBUG 1/ in a header file, or "
"\"revision that does not have this commit needs this patch applied to work "
"around another problem this bisection is not interested in\") applied to the "
"revision being tested."
msgstr ""
"時折、分割テストをするリビジョンに一時的な変更を加えたくなるでしょう。\n"
"(例えば s/#define 0/#define 1/をヘッダーファイルに適用したり、\n"
" \"リビジョンにコミットしない、今回のbisectにはあまり関係のない他の問題のため"
"のパッチが必要です。\")\n"

#. type: Plain text
#: ../../git-bisect.txt:258
#, fuzzy
msgid ""
"To cope with such a situation, after the inner 'git bisect' finds the next "
"revision to test, the script can apply the patch before compiling, run the "
"real test, and afterwards decide if the revision (possibly with the needed "
"patch) passed the test and then rewind the tree to the pristine state.  "
"Finally the script should exit with the status of the real test to let the "
"\"git bisect run\" command loop determine the eventual outcome of the bisect "
"session."
msgstr ""
"このような状況に対処するためには、 'git bisect'の中で次のテストするべきリビ"
"ジョンが見つかった後、 コンパイル、テストを行う前に、スクリプトがパッチを与え"
"ることが出来ます。 そして、最終的にそのリビジョン(場合によっては必要なパッチ"
"を決定して)  でテストをパスするか判断し、元の状態にツリーを戻します。 最後"
"に、スクリプトは\"git bisect run\"コマンドループが今回の分割の結果を 判断させ"
"るための、実質的なテスト結果を終了時に渡します。"

#. type: Plain text
#: ../../git-bisect.txt:263
#, fuzzy
msgid "Automatically bisect a broken build between v1.2 and HEAD:"
msgstr "v1.2 と HEAD の間でビルドに失敗している部分を自動で二分探索"

#. type: delimited block -
#: ../../git-bisect.txt:267
#, fuzzy, no-wrap
msgid ""
"$ git bisect start HEAD v1.2 --      # HEAD is bad, v1.2 is good\n"
"$ git bisect run make                # \"make\" builds the app\n"
msgstr ""
"$ git bisect start HEAD v1.2 --      # HEADは駄目, v1.2は大丈夫\n"
"$ git bisect run make                # \"make\"でアプリをビルド\n"

#. type: Plain text
#: ../../git-bisect.txt:270
#, fuzzy
msgid "Automatically bisect a test failure between origin and HEAD:"
msgstr "originとHEADの間で、テストに失敗している部分を自動で二分探索"

#. type: delimited block -
#: ../../git-bisect.txt:274
#, fuzzy, no-wrap
msgid ""
"$ git bisect start HEAD origin --    # HEAD is bad, origin is good\n"
"$ git bisect run make test           # \"make test\" builds and tests\n"
msgstr ""
"$ git bisect start HEAD origin --    # HEADは駄目, originは大丈夫\n"
"$ git bisect run make test           # \"make test\" でビルドとテスト\n"

#. type: Plain text
#: ../../git-bisect.txt:277 ../../git-bisect.txt:316
#, fuzzy
msgid "Automatically bisect a broken test suite:"
msgstr ""
"#-#-#-#-#  translated/git-bisect.txt:269  #-#-#-#-#\n"
"テストが壊れていても、自動で二分探索\n"
"#-#-#-#-#  translated/git-bisect.txt:306  #-#-#-#-#\n"
"壊れたテストスイートを自動で二分探索"

#. type: delimited block -
#: ../../git-bisect.txt:285
#, fuzzy, no-wrap
msgid ""
"$ cat ~/test.sh\n"
"#!/bin/sh\n"
"make || exit 125                   # this skips broken builds\n"
"make test                          # \"make test\" runs the test suite\n"
"$ git bisect start v1.3 v1.1 --    # v1.3 is bad, v1.1 is good\n"
"$ git bisect run ~/test.sh\n"
msgstr ""
"$ cat ~/test.sh\n"
"#!/bin/sh\n"
"make || exit 125                   # ビルドに失敗したらスキップ\n"
"make test                          # \"make test\" テストスイートを実行\n"
"$ git bisect start v1.3 v1.1 --    # v1.3は駄目, v1.1は大丈夫\n"
"$ git bisect run ~/test.sh\n"

#. type: Plain text
#: ../../git-bisect.txt:289
#, fuzzy
msgid ""
"Here we use a \"test.sh\" custom script. In this script, if \"make\" fails, "
"we skip the current commit."
msgstr ""
"この例では、\"test.sh\"というカスタムスクリプトを使っています。 このスクリプ"
"トは、\"make\"に失敗したらこのコミットはスキップします"

#. type: Plain text
#: ../../git-bisect.txt:293
#, fuzzy
msgid ""
"It is safer to use a custom script outside the repository to prevent "
"interactions between the bisect, make and test processes and the script."
msgstr ""
"bisect, make, test プロセスと スクリプトとの相互作用を防ぐために、 カスタムス"
"クリプトを使用する時はレポジトリの管理外にある方が安全です。"

#. type: Plain text
#: ../../git-bisect.txt:296
#, fuzzy
msgid ""
"\"make test\" should \"exit 0\", if the test suite passes, and \"exit 1\" "
"otherwise."
msgstr ""
"もしテストに合格すれば \"make test\" は \"exit 0\" を, そうでなければ \"exit "
"1\" を返します。"

#. type: Plain text
#: ../../git-bisect.txt:298
#, fuzzy
msgid "Automatically bisect a broken test case:"
msgstr "壊れたテストケースを自動で二分探索"

#. type: delimited block -
#: ../../git-bisect.txt:306
#, fuzzy, no-wrap
msgid ""
"$ cat ~/test.sh\n"
"#!/bin/sh\n"
"make || exit 125                     # this skips broken builds\n"
"~/check_test_case.sh                 # does the test case passes ?\n"
"$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n"
"$ git bisect run ~/test.sh\n"
msgstr ""
"$ cat ~/test.sh\n"
"#!/bin/sh\n"
"make || exit 125                     # ビルドに失敗したらスキップ\n"
"~/check_test_case.sh                 # テストケースをパスする？\n"
"$ git bisect start HEAD HEAD~10 --   # 原因は最後の10個に\n"
"$ git bisect run ~/test.sh\n"

#. type: Plain text
#: ../../git-bisect.txt:310
#, fuzzy
msgid ""
"Here \"check_test_case.sh\" should \"exit 0\" if the test case passes, and "
"\"exit 1\" otherwise."
msgstr ""
"ここで \"check_test_case.sh\" はテストに合格すれば \"exit 0\" を、そうでなけ"
"れば \"exit 1\" を返します。"

#. type: Plain text
#: ../../git-bisect.txt:314
#, fuzzy
msgid ""
"It is safer if both \"test.sh\" and \"check_test_case.sh\" scripts are "
"outside the repository to prevent interactions between the bisect, make and "
"test processes and the scripts."
msgstr ""
"bisect, make, test プロセスと スクリプトとの相互作用を防ぐために、 \"test.sh"
"\"と\"check_test_case.sh\"はレポジトリの管理外にある方がより安全です。"

#. type: delimited block -
#: ../../git-bisect.txt:320
#, fuzzy, no-wrap
msgid ""
"$ git bisect start HEAD HEAD~10 --   # culprit is among the last 10\n"
"$ git bisect run sh -c \"make || exit 125; ~/check_test_case.sh\"\n"
msgstr ""
"$ git bisect start HEAD HEAD~10 --   # 原因は最後の10個に\n"
"$ git bisect run sh -c \"make || exit 125; ~/check_test_case.sh\"\n"

#. type: Plain text
#: ../../git-bisect.txt:323
#, fuzzy
msgid "Does the same as the previous example, but on a single line."
msgstr "以前の例と同じですが、これなら一行で書けます。"

#. type: Title -
#: ../../git-bisect.txt:325 ../../git-cherry-pick.txt:75
#: ../../git-clean.txt:59 ../../git-grep.txt:192
#, fuzzy, no-wrap
msgid "Author"
msgstr "Author"

#. type: Plain text
#: ../../git-bisect.txt:327
#, fuzzy
msgid "Written by Linus Torvalds <torvalds@osdl.org>"
msgstr ""
"このプログラムは Linus Torvalds <torvalds@osdl.org> よって書かれました。"

#. type: Title -
#: ../../git-bisect.txt:329 ../../git-cherry-pick.txt:79
#: ../../git-grep.txt:197
#, fuzzy, no-wrap
msgid "Documentation"
msgstr "Documentation"

#. type: Plain text
#: ../../git-bisect.txt:331 ../../git-cherry-pick.txt:81
#: ../../git-grep.txt:199
#, fuzzy
msgid "Documentation by Junio C Hamano and the git-list <git@vger.kernel.org>."
msgstr ""
"#-#-#-#-#  git-bisect.txt.po (PACKAGE VERSION)  #-#-#-#-#\n"
"このドキュメントは Junio C Hamano と git-list <git@vger.kernel.org> 有志に"
"よって書かれました。\n"
"#-#-#-#-#  git-cherry-pick.txt.po (PACKAGE VERSION)  #-#-#-#-#\n"
"このドキュメントは Junio C Hamano と git-list <git@vger.kernel.org> 有志に"
"よって書かれました。\n"
"#-#-#-#-#  git-grep.txt.po (PACKAGE VERSION)  #-#-#-#-#\n"
"ドキュメントは、Junio C Hamano と git-list <git@vger.kernel.org> によって記述"
"されました。"

#. type: Plain text
#: ../../git-bisect.txt:336
#, fuzzy
msgid ""
"link:git-bisect-lk2009.html[Fighting regressions with git bisect], linkgit:"
"git-blame[1]."
msgstr ""
"link:git-bisect-lk2009.html[git bisect による復帰への戦い], linkgit:git-blame"
"[1]."
